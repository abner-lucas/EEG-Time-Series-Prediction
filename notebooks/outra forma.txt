C_train, C_validation, C_test, C_mean_sensors = train_test_split(s_control_frontal, val_size=0.2, test_size=0.2)

# train_norm = data_norm(C_train.values, v_min=-1, v_max=1)
# validation_norm = data_norm(C_validation.values, v_min=-1, v_max=1)
# test_norm = data_norm(C_test.values, v_min=-1, v_max=1)

steps = 18

# x_train, y_train = split_sequence(data=train_norm, n_steps=steps)
# x_validation, y_validation = split_sequence(data=validation_norm, n_steps=steps)
# x_test, y_test = split_sequence(data=test_norm, n_steps=steps)

C_x_train, C_y_train = split_sequence(data=C_train.values, n_steps=steps)
C_x_validation, C_y_validation = split_sequence(data=C_validation.values, n_steps=steps)
C_x_test, C_y_test = split_sequence(data=C_test.values, n_steps=steps)

# model = KerasRegressor(build_fn=network_model, verbose=0)
# grid = GridSearchCV(estimator=model, param_grid=paramns, n_jobs=-1, cv=3, verbose=1)
# grid_result = grid.fit(x_train, y_train)

paramns = {'n_features':9,
           'n_neurons':9,
           'kernel_initializer':'random_uniform',
           'activation': 'relu',
           'func_loss': 'mse',
           'optimizer': 'sgd',
           'metrics': ['mae']}

network_model = lambda: MLP(**paramns)
n_epochs = 150
mlp_regressor_control = KerasRegressor(build_fn=network_model, epochs=n_epochs, batch_size=32)

#ignore UserWarning
with warnings.catch_warnings():
    warnings.filterwarnings("ignore")
    
    model_control = mlp_regressor_control.fit(x_train, y_train, validation_data=(x_validation, y_validation), shuffle=False)

pred_control = mlp_regressor_control.predict(x_test)
# print('RMSE: ' + str(RMSE(y_test, pred_control)))
# print('MAE: ' + str(MAE(y_test, pred_control)))
# print('MAPE: ' + str(MAPE(y_test, pred_control)))

rmse = np.sqrt(mean_squared_error(y_test, pred_control))
mae = mean_absolute_error(y_test, pred_control)
mape = mean_absolute_percentage_error(y_test, pred_control)
print(f'Métricas de validação no grupo Controle')
print(f'RMSE: {rmse:.5f}')
print(f'MAE:  {mae:.5f}')
print(f'MAPE: {mape:.2f}%')